// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniversityDatabaseImplement;

#nullable disable

namespace UniversityDatabaseImplement.Migrations
{
    [DbContext(typeof(UniversityDatabase))]
    partial class UniversityDatabaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("UniversityDatabaseImplement.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.Decree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Decrees");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.DecreeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DecreeId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DecreeId");

                    b.HasIndex("GroupId");

                    b.ToTable("DecreeGroups");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.DecreeStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DecreeId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DecreeId");

                    b.HasIndex("StudentId");

                    b.ToTable("DecreeStudents");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.EducationalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfChange")
                        .HasColumnType("datetime2");

                    b.Property<int>("FStatus")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("StudentId");

                    b.ToTable("EducationalStatuses");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.Flow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("Faculty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfCourse")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID");

                    b.ToTable("Flows");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.FlowStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FlowId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlowId");

                    b.HasIndex("StudentId");

                    b.ToTable("FlowStudents");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FlowId")
                        .HasColumnType("int");

                    b.Property<int>("SemestersAmount")
                        .HasColumnType("int");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID");

                    b.HasIndex("FlowId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("HoursAmount")
                        .HasColumnType("int");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.SubjectFlow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FlowId")
                        .HasColumnType("int");

                    b.Property<string>("Lecturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlowId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectFlows");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.Decree", b =>
                {
                    b.HasOne("UniversityDatabaseImplement.Models.Provider", "Provider")
                        .WithMany("Decrees")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.DecreeGroup", b =>
                {
                    b.HasOne("UniversityDatabaseImplement.Models.Decree", "Decree")
                        .WithMany("DecreeGroups")
                        .HasForeignKey("DecreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityDatabaseImplement.Models.Group", "Group")
                        .WithMany("GroupDecrees")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Decree");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.DecreeStudent", b =>
                {
                    b.HasOne("UniversityDatabaseImplement.Models.Decree", "Decree")
                        .WithMany("DecreeStudents")
                        .HasForeignKey("DecreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityDatabaseImplement.Models.Student", "Student")
                        .WithMany("DecreeStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Decree");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.EducationalStatus", b =>
                {
                    b.HasOne("UniversityDatabaseImplement.Models.Provider", "Provider")
                        .WithMany("EducationalStatuses")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityDatabaseImplement.Models.Student", "Student")
                        .WithMany("EducationalStatuses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.Flow", b =>
                {
                    b.HasOne("UniversityDatabaseImplement.Models.Customer", "Customer")
                        .WithMany("Flows")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.FlowStudent", b =>
                {
                    b.HasOne("UniversityDatabaseImplement.Models.Flow", "Flow")
                        .WithMany("FlowStudents")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityDatabaseImplement.Models.Student", "Student")
                        .WithMany("StudentFlows")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flow");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.Group", b =>
                {
                    b.HasOne("UniversityDatabaseImplement.Models.Customer", "Customer")
                        .WithMany("Groups")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityDatabaseImplement.Models.Flow", null)
                        .WithMany("Groups")
                        .HasForeignKey("FlowId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.Student", b =>
                {
                    b.HasOne("UniversityDatabaseImplement.Models.Provider", "Provider")
                        .WithMany("Students")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.Subject", b =>
                {
                    b.HasOne("UniversityDatabaseImplement.Models.Customer", "Customer")
                        .WithMany("Subjects")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.SubjectFlow", b =>
                {
                    b.HasOne("UniversityDatabaseImplement.Models.Flow", "Flow")
                        .WithMany("SubjectFlows")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityDatabaseImplement.Models.Subject", "Subject")
                        .WithMany("SubjectFlows")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flow");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.Customer", b =>
                {
                    b.Navigation("Flows");

                    b.Navigation("Groups");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.Decree", b =>
                {
                    b.Navigation("DecreeGroups");

                    b.Navigation("DecreeStudents");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.Flow", b =>
                {
                    b.Navigation("FlowStudents");

                    b.Navigation("Groups");

                    b.Navigation("SubjectFlows");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.Group", b =>
                {
                    b.Navigation("GroupDecrees");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.Provider", b =>
                {
                    b.Navigation("Decrees");

                    b.Navigation("EducationalStatuses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.Student", b =>
                {
                    b.Navigation("DecreeStudents");

                    b.Navigation("EducationalStatuses");

                    b.Navigation("StudentFlows");
                });

            modelBuilder.Entity("UniversityDatabaseImplement.Models.Subject", b =>
                {
                    b.Navigation("SubjectFlows");
                });
#pragma warning restore 612, 618
        }
    }
}
